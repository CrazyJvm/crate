apply plugin: 'java'

archivesBaseName = 'crate-sigar'
group = 'io.crate'
description = 'Crate.IO Sigar Plugin'

configurations {
    all*.exclude group: 'org.elasticsearch'
    nativeLibs
}

dependencies {
    compile project(':es')
    compile project(':core')
    compile project(':sql')
    compile "org.fusesource:sigar:1.6.4"

    nativeLibs ("org.fusesource:sigar:1.6.4:native") {
      exclude group: "log4j"
    }
}

task extractNativeJar(type: Copy) {
  configurations.nativeLibs.each {
    from zipTree(it)
  }
  into 'native-libs'
}

/*
run {
  jvmArgs = [ '-Dorg.hyperic.sigar.path=./native-libs' ]
}
run.dependsOn('extractNativeJar')
*/

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/*.Plugin'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

task writePropertiesFile (dependsOn: ['getVersion']) << {

    def file = new File(project.projectDir.path + "/plugin-descriptor.properties");
    if (file.isFile()){
        file.delete();
    }
    if(!file.isFile()){
        file.createNewFile();
    }

    ant.propertyfile(file:file.path, comment:'Plugin Descriptor') {
        ant.entry(key:'name', value:project.archivesBaseName)
        ant.entry(key:'description', value:project.description)
        ant.entry(key:'version', value:project.version)
        ant.entry(key:'jvm', value:true)
        ant.entry(key:'classname', value:'io.crate.plugin.sigar.CrateSigarPlugin')
        // TODO: get version from pom
        ant.entry(key:'elasticsearch.version', value:'2.1.2')
        ant.entry(key:'java.version', value:'1.8')
    }
}

processResources.dependsOn writePropertiesFile

// get version and set it on the project, so it gets appended to the jar name
task getVersion(dependsOn: [':core:getVersion']) {
    doFirst {
        project.version = project(':core').getVersion.version
    }
}

jar {
    doLast {
        manifest {
            attributes("Implementation-Title": "Crate.IO Sigar Plugin", "Implementation-Version": project.version)
        }
    }
}
jar.dependsOn(getVersion)
